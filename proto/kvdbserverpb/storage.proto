syntax = "proto3";

package kvdbserverapi;

message GetTypeOfKeyRequest {
    // The key whose data type should be returned.
    string key = 1;
}

message GetTypeOfKeyResponse {
    // The data type of the key.
    string key_type = 1;
    // True if the key exists. False if it doesn't exist.
    bool ok = 2;
}

message SetStringRequest {
    // The key to use.
    string key = 1;
    // The value to store.
    string value = 2;
}

message SetStringResponse {}

message GetStringRequest {
    // The key to use.
    string key = 1;
}

message GetStringResponse {
    // The returned value.
    string value = 1;
    // True if the key exists. False if it doesn't exist.
    bool ok = 2;
}

message DeleteKeyRequest {
    // The key to delete.
    string key = 1;
}

message DeleteKeyResponse {
    // True if the key was deleted. False if it doesn't exist.
    bool ok = 1;
}

message DeleteAllKeysRequest {}

message DeleteAllKeysResponse {}

message GetKeysRequest {}

message GetKeysResponse {
    // List of returned keys.
    repeated string keys = 1;
}

message SetHashMapRequest {
    // The key to use.
    string key = 1;
    // The fields to be set and their corresponding values.
    map<string, string> fields = 2;
}

message SetHashMapResponse {
    // The number of fields that were added.
    uint32 fields_added = 1;
}

message GetHashMapFieldValueRequest {
    // The key to use.
    string key = 1;
    // The field whose value should be returned.
    string field = 2;
}

message GetHashMapFieldValueResponse {
    // The returned value.
    string value = 1;
    // True if the field exists. False if the key or field doesn't exist.
    bool ok = 2;
}

message DeleteHashMapFieldsRequest {
    // The key to use.
    string key = 1;
    // The fields to remove from the HashMap.
    repeated string fields = 2;
}

message DeleteHashMapFieldsResponse {
    // The number of fields that were removed.
    uint32 fields_removed = 1;
    // True if the key exists. False if it doesn't exist.
    bool ok = 2;
}

message GetAllHashMapFieldsAndValuesRequest {
    // The key to use.
    string key = 1;
}

message GetAllHashMapFieldsAndValuesResponse {
    // The returned fields and their corresponding values.
    map<string, string> field_value_map = 1;
    // True if the key exists. False if it doesn't exist.
    bool ok = 2;
}

// StorageService provides operations on data storage.
//
// Common gRPC metadata for this service's RPCs:
// - password: The server password if the server is password protected.
// - database: The database to use. If omitted, the default database is used.
service StorageService {
    // GetTypeOfKey returns the data type of the value a key is holding.
    rpc GetTypeOfKey(GetTypeOfKeyRequest) returns (GetTypeOfKeyResponse) {}

    // SetString sets a key to hold a String value. Creates the key if it doesn't exist.
    // Overwrites the key if it is holding a value of another data type.
    rpc SetString(SetStringRequest) returns (SetStringResponse) {}

    // GetString returns the value a String key is holding.
    rpc GetString(GetStringRequest) returns (GetStringResponse) {}

    // DeleteKey deletes a key and its value.
    rpc DeleteKey(DeleteKeyRequest) returns (DeleteKeyResponse) {}

    // DeleteAllKeys deletes all the keys of a database.
    rpc DeleteAllKeys(DeleteAllKeysRequest) returns (DeleteAllKeysResponse) {}

    // GetKeys returns all the keys of a database.
    rpc GetKeys(GetKeysRequest) returns (GetKeysResponse) {}

    // SetHashMap sets the specified fields and their values in the HashMap stored at a key.
    // If the specified fields exist, they will be overwritten with the new values.
    // Creates the key if it doesn't exist. Overwrites the key if it is holding a value of another data type.
    rpc SetHashMap(SetHashMapRequest) returns (SetHashMapResponse) {}

    // GetHashMapFieldValue returns the value of a field in the HashMap stored at a key.
    rpc GetHashMapFieldValue(GetHashMapFieldValueRequest) returns (GetHashMapFieldValueResponse) {}

    // DeleteHashMapFields removes the specified fields from the HashMap stored at a key.
    rpc DeleteHashMapFields(DeleteHashMapFieldsRequest) returns (DeleteHashMapFieldsResponse) {}

    // GetAllHashMapFieldsAndValues returns all the fields and values of the HashMap stored at a key.
    rpc GetAllHashMapFieldsAndValues(GetAllHashMapFieldsAndValuesRequest) returns (GetAllHashMapFieldsAndValuesResponse) {}
}